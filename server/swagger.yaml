openapi: 3.0.0
info:
  title: Cold Emailer API
  version: 1.0.0
  description: Send scheduled cold emails to multiple recipients

servers:
  - url: http://localhost:5000

paths:
  /api/category:
    post:
      summary: Create a new category
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category created successful
                  data:
                    $ref: "#/components/schemas/Category"
        "409":
          description: Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category already exists.
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object

    get:
      summary: Get all categories
      responses:
        "200":
          description: Successful fetch
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        "404":
          description: No categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No categories found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object

  /api/category/{id}:
    get:
      summary: Get category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful
                  data:
                    $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object

    put:
      summary: Update category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
              example:
                category: New Category Name
      responses:
        "201":
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category updated successful
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object

    delete:
      summary: Delete category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Category deleted successfully
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found
        "500":
          description: Error deleting category
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object
  /api/recipient:
    post:
      summary: Create a new recipient
      tags:
        - Recipient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipient"
      responses:
        "200":
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: created successfully
                  data:
                    $ref: "#/components/schemas/Recipient"
        "409":
          description: Recipient already exists
        "500":
          description: Error creating recipient

    get:
      summary: Get all recipients
      responses:
        "200":
          description: Recipients fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recipient"
        "404":
          description: No recipient found
        "500":
          description: Error fetching recipients

  /api/recipient/{email}:
    get:
      summary: Get recipient by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Recipient fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful
                  data:
                    $ref: "#/components/schemas/Recipient"
        "404":
          description: Recipient not found
        "500":
          description: Error fetching recipient

    put:
      summary: Update recipient by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newData:
                  type: object
                  properties:
                    name:
                      type: string
                    category:
                      type: string
      responses:
        "200":
          description: Recipient updated successfully
        "404":
          description: Recipient not found
        "500":
          description: Error updating recipient

    delete:
      summary: Delete recipient by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Recipient deleted successfully
        "404":
          description: Recipient not found
        "500":
          description: Error deleting recipient
  /api/schedules:
    post:
      summary: Create a new schedule
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - frequency
                - day
                - hour
                - recipients
                - template
              properties:
                frequency:
                  type: string
                  enum: [weekly, monthly]
                  example: "weekly"
                day:
                  type: integer
                  example: 1
                hour:
                  type: integer
                  example: 14
                recipients:
                  type: array
                  items:
                    type: string
                  example: ["user1@example.com", "user2@example.com"]
                round:
                  type: integer
                  default: 0
                template:
                  type: object
                  required:
                    - subject
                    - body
                  properties:
                    subject:
                      type: string
                      example: "Main Subject"
                    body:
                      type: string
                      example: "Main Body"
                    attachment:
                      type: string
                      example: "https://example.com/file.pdf"
                templateOne:
                  $ref: "#/components/schemas/OptionalTemplate"
                templateTwo:
                  $ref: "#/components/schemas/OptionalTemplate"
                templateThree:
                  $ref: "#/components/schemas/OptionalTemplate"
      responses:
        "201":
          description: Schedule created successfully
        "400":
          description: Missing required fields
        "500":
          description: Server error

    get:
      summary: Get all schedules
      tags:
        - Schedule
      responses:
        "200":
          description: Fetched schedules
        "500":
          description: Server error
  /api/schedules/{id}:
    put:
      summary: Update a schedule by ID
      tags:
        - Schedule
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                frequency:
                  type: string
                day:
                  type: integer
                hour:
                  type: integer
                recipients:
                  type: array
                  items:
                    type: string
                round:
                  type: integer
                disabled:
                  type: boolean
                successful:
                  type: integer
                failed:
                  type: integer
                template:
                  $ref: "#/components/schemas/Template"
                templateOne:
                  $ref: "#/components/schemas/OptionalTemplate"
                templateTwo:
                  $ref: "#/components/schemas/OptionalTemplate"
                templateThree:
                  $ref: "#/components/schemas/OptionalTemplate"
      responses:
        "200":
          description: Updated schedule
        "500":
          description: Server error

    delete:
      summary: Delete a schedule by ID
      tags:
        - Schedule
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Schedule deleted
        "500":
          description: Server error

components:
  schemas:
    Template:
      type: object
      required:
        - subject
        - body
      properties:
        subject:
          type: string
          example: "Main Subject"
        body:
          type: string
          example: "Main Body"
        attachment:
          type: string
          example: "https://example.com/file.pdf"

    OptionalTemplate:
      type: object
      properties:
        subject:
          type: string
          example: "Follow-up Subject"
        body:
          type: string
          example: "Follow-up Body"
        attachment:
          type: string
          example: "https://example.com/attachment.pdf"

    Category:
      type: object
      properties:
        _id:
          type: string
        category:
          type: string

    Recipient:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        name:
          type: string
        category:
          type: string
